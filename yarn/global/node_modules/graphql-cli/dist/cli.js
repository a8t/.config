"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const commander_1 = require("commander");
const get_plugin_1 = require("./get-plugin");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const globby_1 = tslib_1.__importDefault(require("globby"));
const path_1 = require("path");
const log_symbols_1 = tslib_1.__importDefault(require("log-symbols"));
const reportError = (e) => {
    console.error(log_symbols_1.default.error, e instanceof Error ? e.message || e : e);
    process.exit(1);
};
async function cli(argv = process.argv) {
    try {
        const rootCommand = argv[2];
        if (!rootCommand || rootCommand === '') {
            const foundPlugins = await globby_1.default([`node_modules/@test-graphql-cli/**`, `!node_modules/@test-graphql-cli/common`], { cwd: process.cwd(), onlyDirectories: true, deep: 1 });
            const availableCommands = await Promise.all(foundPlugins.map(pluginPath => Promise.resolve().then(() => tslib_1.__importStar(require(path_1.join(process.cwd(), pluginPath + '/' + 'package.json')))).then(m => m.default || m).then(packageJson => `  - ${chalk_1.default.cyan(packageJson.name.replace('@test-graphql-cli/', ''))}: ${packageJson.description}\n`)));
            throw new Error(`\n` +
                `GraphQL CLI Usage:\n` +
                `${chalk_1.default.cyan(`graphql`)} requires a command to run successfully.\n` +
                `Check out https://github.com/Urigo/graphql-cli for all available commands and how to use them.\n\n` +
                (availableCommands.length ?
                    `Detected available commands: \n\n` +
                        availableCommands.join('\n') : ''));
        }
        const plugin = await get_plugin_1.getPluginByName(rootCommand);
        const program = new commander_1.Command();
        program.option('-p, --project <projectName>');
        let projectName = 'default';
        const loadGraphQLConfig = async (loadConfigOptions = {}) => {
            const graphqlConfig = await Promise.resolve().then(() => tslib_1.__importStar(require('graphql-config')));
            return graphqlConfig.loadConfig({
                rootDir: process.cwd(),
                throwOnEmpty: true,
                throwOnMissing: true,
                ...loadConfigOptions
            });
        };
        const loadProjectConfig = async (loadConfigOptions = {}) => {
            const loadedGraphQLConfig = await loadGraphQLConfig(loadConfigOptions);
            const projectNames = Object.keys(loadedGraphQLConfig.projects);
            if (projectName && !projectNames.includes(projectName)) {
                throw new Error(`You don't have project ${projectName} so you need to specify an available project name.\n` +
                    `Available projects are; ${projectNames.join(',')}.`);
            }
            return loadedGraphQLConfig.getProject(projectName);
        };
        await plugin.init({
            cwd: process.cwd(),
            program,
            reportError,
            loadGraphQLConfig,
            loadProjectConfig,
        });
        // Remove the root object before running, to allow developers to write
        // their own sub-commands.
        // argv.splice(2, 1);
        program.parse(argv);
        if (program.project) {
            projectName = program.project;
        }
    }
    catch (e) {
        reportError(e);
    }
}
exports.cli = cli;
//# sourceMappingURL=cli.js.map